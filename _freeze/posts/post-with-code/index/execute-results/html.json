{
  "hash": "a6972ff1d1d3531a35e837c460be80a5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Publicando Site Quarto no Github\"\nauthor: \"Evaldo Silva\"\ndate: \"2025-04-13\"\ncategories: [code, analysis, R]\nimage: \"github-pages.png\"\n---\n\n\n\n![](github-pages.png){fig-align=\"left\" width=\"452\"}\n\n## 🚀 Como Publicar um Site Quarto no GitHub Pages\n\nPublicar um site feito com Quarto usando o GitHub Pages é uma maneira prática e gratuita de compartilhar seu conteúdo online. Abaixo, apresento um passo a passo simples e eficaz para configurar tudo corretamente.\n\n### 🌐 Pré-requisitos\n\nAntes de começar, certifique-se de ter:\n\n-   Uma conta ativa no [GitHub](https://github.com)\n-   O Git instalado e configurado no seu sistema\n-   O R, RStudio e o pacote `quarto` instalados\n\n### 🛠️ 1. Criar o repositório no GitHub\n\n1.  Acesse [github.com](https://github.com) e clique em **New Repository**.\n2.  Dê ao repositório o nome exato:\\\n    **`nome-de-usuario.github.io`**\\\n    *(substitua pelo seu nome de usuário real do GitHub)*\n3.  Marque as opções: - ✅ Adicionar `.gitignore` (selecione `R`) - ✅ Escolher uma licença (como MIT)\n\n### 💻 2. Clonar o repositório via RStudio\n\n1.  No RStudio, vá em:\\\n    `File > New Project > Version Control > Git`\n\n2.  Cole a URL do repositório, algo como:\\\n    `https://github.com/nome-de-usuario/nome-de-usuario.github.io.git`\n\n3.  Escolha uma pasta local e clique em **Create Project**.\n\n### 📁 3. Copiar os arquivos do seu blog/site\n\n1.  Copie os arquivos e pastas do seu projeto Quarto (ex: `my_blog/`) para dentro da pasta do novo repositório. Você pode ver **como criar um Blog em Quarto no Rstudio** clicando neste vídeo [tutorial](https://www.youtube.com/watch?v=OlvO-EG-P60){target=\"_blank\"} do youtube.\n2.  ⚠️ Não sobrescreva arquivos já existentes, como `.gitignore` ou o `.Rproj`.\n3.  Certifique-se de que o nome do arquivo de projeto seja:\\\n    **`nome-de-usuario.github.io.Rproj`**\n\n### ⚙️ 4. Ajustar o arquivo `_quarto.yml`\n\n1.  Localize e abra o arquivo `_quarto.yml` do seu projeto.\n2.  **Adicione a linha abaixo de `type:`** para que a saída vá para a pasta `docs`:\n\n![](images/yml.png)\n\n### 🚫 5. Verificar o arquivo `.gitignore`\n\n-   Verifique se a pasta `docs/` não está listada no arquivo `.gitignore`.\n-   Caso esteja, remova a linha com `docs/`.\n\n### 🧪 6. Renderizar o site localmente\n\nNo console do RStudio, execute:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquarto::quarto_render()\n```\n:::\n\n\n\nIsso criará a pasta `docs/` com os arquivos HTML renderizados.\n\n### 🟢 7. Commit e push para o GitHub\n\nNo terminal ou via interface Git do RStudio:\n\n![](images/comando-git.png)\n\n### ⚙️ 8. Configurar o GitHub Pages\n\n1.  No seu repositório GitHub, vá em:\\\n    `Settings > Pages`\n\n2.  Em **Source**, selecione:\n\n    -   **Branch:** `main`\n\n    -   **Folder:** `/docs`\n\n    -   Clique em **Save**\n\n### 🎉 9. Pronto!\n\nAguarde alguns segundos e seu site estará acessível em:\n\n> **https://nome-de-usuario.github.io/**\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}